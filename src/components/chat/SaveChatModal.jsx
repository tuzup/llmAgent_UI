import React, { useEffect, useRef, useState } from "react";
import {
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    TextField,
    Button,
    Box,
    InputAdornment,
    IconButton,
    Tooltip,
    CircularProgress
} from "@mui/material";
import appConfig from "../../config/appConfig";
import { useChat } from "../../context/ChatContext";
import { GeneratingTokens } from "@mui/icons-material";

const SaveChatModal = () => {
    const { saveChatModalOpen, toggleSaveChatModal, saveChat } = useChat();
    const [title, setTitle] = useState("");
    const [isGeneratingTitle, setIsGeneratingTitle] = useState(false);
    const inputRef = useRef(null);

    const handleSave = () => {
        saveChat(title);
        setTitle(""); // Reset the title input
    };

    const handleClose = () => {
        toggleSaveChatModal();
        setTitle(""); // Reset the title input
    };

    const handleAutoGenerateTitle = () => {
        // Logic to auto-generate a title can be added here
        setIsGeneratingTitle(true);
        setTimeout(() => {
            const autoGeneratedTitle = `Chat on ${new Date().toLocaleDateString()}`;

            setTitle(autoGeneratedTitle.trim);
            setIsGeneratingTitle(false);
        }, 800);
    }

    return (
        <Dialog
            open={saveChatModalOpen}
            onClose={handleClose}
            fullWidth
            maxWidth="sm"
            TransitionProps={{
                onEntered: () => {
                    if (inputRef.current) {
                        inputRef.current.focus();
                    }
                }
            }}
        >
            <DialogTitle sx={{
                fontWeight: 600,
                color: appConfig.theme.userMessageText
            }}>
                Save Chat
            </DialogTitle>
            <DialogContent>
                <Box sx={{ mt: 1 }}>
                    <TextField
                        inputRef={inputRef}
                        autoFocus={true}
                        margin="dense"
                        label="Chat Title"
                        fullWidth
                        variant="outlined"
                        value={title}
                        onChange={(e) => {
                            const maxLength = appConfig.saveChat.maxTitleLength || 100;
                            if (e.target.value.length <= maxLength) {
                                setTitle(e.target.value);
                            }
                        }}
                        sx={{
                            '& .MuiOutlinedInput-root': {
                                '&.Mui-focused fieldset': {
                                    borderColor: appConfig.theme.primaryColor,
                                },
                            },
                            '& .MuiInputLabel-root.Mui-focused': {
                                color: appConfig.theme.primaryColor,
                            },
                        }}
                        InputProps={
                            !title
                                ? {
                                    endAdornment: (
                                        <InputAdornment position="end">
                                            <Tooltip title="Auto Generate Title">
                                                {isGeneratingTitle? <CircularProgress size={24} color="primary" /> :
                                                <IconButton edge="end" color="primary" onClick={handleAutoGenerateTitle}>
                                                    <GeneratingTokens/>
                                                </IconButton>}
                                            </Tooltip>
                                        </InputAdornment>
                                    ),
                                }
                                : undefined
                        }
                        helperText={`${title.length}/${appConfig.saveChat.maxTitleLength || 100} `}
                    />
                </Box>
            </DialogContent>
            <DialogActions sx={{ px: 3, pb: 3 }}>
                <Button
                    onClick={handleClose}
                    sx={{
                        color: appConfig.theme.secondaryTextColor,
                        '&:hover': {
                            backgroundColor: 'rgba(0, 0, 0, 0.04)',
                        }
                    }}
                >
                    Cancel
                </Button>
                <Button
                    onClick={handleSave}
                    variant="contained"
                    sx={{
                        backgroundColor: appConfig.theme.primaryColor,
                        '&:hover': {
                            backgroundColor: appConfig.theme.primaryHoverColor,
                        },
                        borderRadius: 2,
                    }}
                >
                    Save
                </Button>
            </DialogActions>
        </Dialog>
    );
};

export default SaveChatModal;