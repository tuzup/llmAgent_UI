{
    "model": "gpt-4o",
    "messages": [
        {
            "role": "system",
            "content": "You are a backend integrated AI agent that has access to multiple backend functions. You are an internal BMW company tool known as 'SEA', providing users with database information and answering queries. If there are function calling errors, provide user-friendly responses without technical implementation details."
        },
        {
            "role": "system",
            "content": "Current user is 123, Today's date is July 13, 2025"
        },
        {
            "role": "user",
            "content": "Calculate the total revenue generated by each department in the last quarter, including only completed orders, and rank departments by revenue efficiency (revenue per employee)"
        }
    ],
    "functions": [
        {
            "name": "convert_json_to_mysql",
            "description": "Advanced SQL query assistant that converts natural language requests into structured JSON format for complex database queries.\n\nDatabase Schema:\n\n**users table:**\n- id (INT, PRIMARY KEY)\n- username (VARCHAR(50))\n- email (VARCHAR(100))\n- first_name (VARCHAR(50))\n- last_name (VARCHAR(50))\n- date_joined (DATETIME)\n- status (ENUM: 'active', 'inactive', 'suspended')\n- department_id (INT, FOREIGN KEY → departments.id)\n- salary (DECIMAL(10,2))\n- remaining_budget (DECIMAL(10,2))\n- total_budget (DECIMAL(10,2))\n\n**departments table:**\n- id (INT, PRIMARY KEY)\n- name (VARCHAR(100))\n- manager_id (INT, FOREIGN KEY → users.id)\n- budget (DECIMAL(12,2))\n- average_salary (DECIMAL(10,2))\n- created_at (DATETIME)\n\n**orders table:**\n- id (INT, PRIMARY KEY)\n- user_id (INT, FOREIGN KEY → users.id)\n- order_date (DATETIME)\n- total_amount (DECIMAL(10,2))\n- status (ENUM: 'pending', 'completed', 'cancelled')\n- shipping_address (TEXT)\n\n**projects table:**\n- id (INT, PRIMARY KEY)\n- name (VARCHAR(200))\n- department_id (INT, FOREIGN KEY → departments.id)\n- manager_id (INT, FOREIGN KEY → users.id)\n- estimated_cost (DECIMAL(12,2))\n- actual_cost (DECIMAL(12,2))\n- start_date (DATE)\n- end_date (DATE)\n- status (ENUM: 'planning', 'in_progress', 'completed', 'cancelled')\n\n**project_assignments table:**\n- id (INT, PRIMARY KEY)\n- project_id (INT, FOREIGN KEY → projects.id)\n- user_id (INT, FOREIGN KEY → users.id)\n- role (VARCHAR(50))\n- hours_allocated (INT)\n- hours_worked (INT)\n- assigned_date (DATE)\n\n**CRITICAL QUERY ANALYSIS RULES:**\n\n**1. SUPERLATIVE QUERIES (HIGHEST/LOWEST):**\n- \"Show [entity] with [highest/lowest] [attribute]\" → Use ORDER BY + LIMIT\n- \"What is the [max/min] [attribute]\" → Use aggregation function\n- \"Each department's highest [attribute]\" → Use window functions or subqueries\n- NEVER mix aggregation with non-aggregated columns without proper grouping\n\n**2. MULTI-TABLE REQUIREMENTS:**\n- Always identify all tables needed based on query requirements\n- Add necessary JOINs for relationships between tables\n- Use proper foreign key relationships from schema\n- Avoid redundant JOINs between same table pairs\n\n**3. AGGREGATION RULES:**\n- Use HAVING clause for filtering aggregated results\n- Use WHERE clause for filtering individual rows before aggregation\n- GROUP BY required when mixing aggregated and non-aggregated columns\n- Count active employees: COUNT(CASE WHEN status = 'active' THEN 1 END)\n\n**4. COMPLEX QUERY PATTERNS:**\n- \"Each department\" → Requires GROUP BY department\n- \"More than X\" → Use HAVING for post-aggregation filtering\n- \"Department with condition\" → May require subqueries\n- \"Highest in each\" → Use window functions or correlated subqueries\n\n**5. SUBQUERY SCENARIOS:**\n- Nested conditions require subqueries in WHERE clause\n- Complex aggregations may need subqueries in FROM clause\n- Use EXISTS for checking related record existence\n\n**6. PRE-QUERY VALIDATION:**\nBefore generating JSON, analyze:\n- What tables are needed?\n- What JOINs are required?\n- Are aggregations needed?\n- Is GROUP BY required?\n- Are filters needed in WHERE vs HAVING?\n- Does the query need subqueries?\n\n**7. WINDOW FUNCTION SUPPORT:**\nFor \"highest in each group\" queries, use window functions:\n- ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC)\n- RANK() OVER (PARTITION BY department_id ORDER BY salary DESC)\n\nGenerate the most appropriate SQL specification to answer the user's query accurately.",
            "parameters": {
                "type": "object",
                "properties": {
                    "query_type": {
                        "type": "string",
                        "enum": [
                            "SELECT"
                        ],
                        "description": "The type of SQL query. Currently only SELECT is supported."
                    },
                    "select": {
                        "type": "object",
                        "description": "SELECT clause configuration",
                        "properties": {
                            "fields": {
                                "type": "array",
                                "description": "Array of fields to select",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "table": {
                                            "type": "string",
                                            "description": "Table name for the field"
                                        },
                                        "column": {
                                            "type": "string",
                                            "description": "Column name to select"
                                        },
                                        "alias": {
                                            "type": "string",
                                            "description": "Optional alias for the field"
                                        },
                                        "aggregation": {
                                            "type": "string",
                                            "enum": [
                                                "SUM",
                                                "COUNT",
                                                "AVG",
                                                "MAX",
                                                "MIN"
                                            ],
                                            "description": "Optional aggregation function"
                                        },
                                        "case_when": {
                                            "type": "object",
                                            "description": "CASE WHEN logic for conditional aggregation",
                                            "properties": {
                                                "condition": {
                                                    "type": "string"
                                                },
                                                "when_true": {
                                                    "type": "string"
                                                },
                                                "when_false": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "required": [
                                        "table",
                                        "column"
                                    ]
                                },
                                "minItems": 1
                            },
                            "distinct": {
                                "type": "boolean",
                                "description": "Whether to use DISTINCT in SELECT",
                                "default": false
                            }
                        },
                        "required": [
                            "fields"
                        ]
                    },
                    "from": {
                        "type": "object",
                        "description": "FROM clause with primary table and optional JOINs",
                        "properties": {
                            "primary_table": {
                                "type": "string",
                                "description": "Primary table name"
                            },
                            "joins": {
                                "type": "array",
                                "description": "Array of JOIN operations",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "enum": [
                                                "INNER",
                                                "LEFT",
                                                "RIGHT",
                                                "FULL"
                                            ],
                                            "description": "Type of JOIN"
                                        },
                                        "table": {
                                            "type": "string",
                                            "description": "Table to join"
                                        },
                                        "on": {
                                            "type": "object",
                                            "description": "JOIN condition",
                                            "properties": {
                                                "left": {
                                                    "type": "object",
                                                    "properties": {
                                                        "table": {
                                                            "type": "string"
                                                        },
                                                        "column": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "table",
                                                        "column"
                                                    ]
                                                },
                                                "right": {
                                                    "type": "object",
                                                    "properties": {
                                                        "table": {
                                                            "type": "string"
                                                        },
                                                        "column": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "table",
                                                        "column"
                                                    ]
                                                },
                                                "operator": {
                                                    "type": "string",
                                                    "enum": [
                                                        "=",
                                                        "!=",
                                                        "<",
                                                        ">",
                                                        "<=",
                                                        ">="
                                                    ],
                                                    "description": "Comparison operator for JOIN"
                                                }
                                            },
                                            "required": [
                                                "left",
                                                "right",
                                                "operator"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "type",
                                        "table",
                                        "on"
                                    ]
                                }
                            }
                        },
                        "required": [
                            "primary_table"
                        ]
                    },
                    "where": {
                        "type": "object",
                        "description": "WHERE clause with conditions",
                        "properties": {
                            "conditions": {
                                "type": "array",
                                "description": "Array of condition groups",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "logic": {
                                            "type": "string",
                                            "enum": [
                                                "AND",
                                                "OR"
                                            ],
                                            "description": "Logic operator for conditions within this group"
                                        },
                                        "conditionGroup": {
                                            "type": "array",
                                            "description": "Array of individual conditions",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "field": {
                                                        "type": "object",
                                                        "properties": {
                                                            "table": {
                                                                "type": "string"
                                                            },
                                                            "column": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "table",
                                                            "column"
                                                        ]
                                                    },
                                                    "operator": {
                                                        "type": "string",
                                                        "enum": [
                                                            "=",
                                                            "!=",
                                                            "<",
                                                            ">",
                                                            "<=",
                                                            ">=",
                                                            "LIKE",
                                                            "IN",
                                                            "NOT IN",
                                                            "BETWEEN",
                                                            "IS NULL",
                                                            "IS NOT NULL",
                                                            "EXISTS",
                                                            "NOT EXISTS"
                                                        ],
                                                        "description": "Comparison operator"
                                                    },
                                                    "value": {
                                                        "description": "Value to compare against. Can be a literal value, array (for IN/BETWEEN), or subquery"
                                                    },
                                                    "value_type": {
                                                        "type": "string",
                                                        "enum": [
                                                            "literal",
                                                            "parameter",
                                                            "column_reference",
                                                            "sql",
                                                            "subquery"
                                                        ],
                                                        "description": "Type of value"
                                                    }
                                                },
                                                "required": [
                                                    "field",
                                                    "operator"
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "conditionGroup",
                                        "logic"
                                    ]
                                }
                            },
                            "mainLogic": {
                                "type": "string",
                                "enum": [
                                    "AND",
                                    "OR"
                                ],
                                "description": "Main logic operator between condition groups",
                                "default": "AND"
                            }
                        },
                        "required": [
                            "conditions"
                        ]
                    },
                    "group_by": {
                        "type": "array",
                        "description": "GROUP BY fields",
                        "items": {
                            "type": "object",
                            "properties": {
                                "table": {
                                    "type": "string"
                                },
                                "column": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "table",
                                "column"
                            ]
                        }
                    },
                    "having": {
                        "type": "object",
                        "description": "HAVING clause for filtering aggregated results",
                        "properties": {
                            "conditions": {
                                "type": "array",
                                "description": "Array of condition groups for HAVING",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "logic": {
                                            "type": "string",
                                            "enum": [
                                                "AND",
                                                "OR"
                                            ],
                                            "description": "Logic operator for conditions within this group"
                                        },
                                        "conditionGroup": {
                                            "type": "array",
                                            "description": "Array of individual conditions",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "field": {
                                                        "type": "object",
                                                        "properties": {
                                                            "table": {
                                                                "type": "string"
                                                            },
                                                            "column": {
                                                                "type": "string"
                                                            },
                                                            "aggregation": {
                                                                "type": "string",
                                                                "enum": [
                                                                    "SUM",
                                                                    "COUNT",
                                                                    "AVG",
                                                                    "MAX",
                                                                    "MIN"
                                                                ],
                                                                "description": "Aggregation function for HAVING"
                                                            }
                                                        },
                                                        "required": [
                                                            "table",
                                                            "column"
                                                        ]
                                                    },
                                                    "operator": {
                                                        "type": "string",
                                                        "enum": [
                                                            "=",
                                                            "!=",
                                                            "<",
                                                            ">",
                                                            "<=",
                                                            ">=",
                                                            "LIKE",
                                                            "IN",
                                                            "NOT IN",
                                                            "BETWEEN"
                                                        ],
                                                        "description": "Comparison operator"
                                                    },
                                                    "value": {
                                                        "description": "Value to compare against"
                                                    },
                                                    "value_type": {
                                                        "type": "string",
                                                        "enum": [
                                                            "literal",
                                                            "parameter",
                                                            "column_reference",
                                                            "sql"
                                                        ],
                                                        "description": "Type of value"
                                                    }
                                                },
                                                "required": [
                                                    "field",
                                                    "operator"
                                                ]
                                            }
                                        }
                                    },
                                    "required": [
                                        "conditionGroup",
                                        "logic"
                                    ]
                                }
                            },
                            "mainLogic": {
                                "type": "string",
                                "enum": [
                                    "AND",
                                    "OR"
                                ],
                                "description": "Main logic operator between condition groups",
                                "default": "AND"
                            }
                        },
                        "required": [
                            "conditions"
                        ]
                    },
                    "order_by": {
                        "type": "array",
                        "description": "ORDER BY fields",
                        "items": {
                            "type": "object",
                            "properties": {
                                "field": {
                                    "type": "object",
                                    "properties": {
                                        "table": {
                                            "type": "string"
                                        },
                                        "column": {
                                            "type": "string"
                                        },
                                        "aggregation": {
                                            "type": "string",
                                            "enum": [
                                                "SUM",
                                                "COUNT",
                                                "AVG",
                                                "MAX",
                                                "MIN"
                                            ],
                                            "description": "Optional aggregation for ordering"
                                        }
                                    },
                                    "required": [
                                        "table",
                                        "column"
                                    ]
                                },
                                "direction": {
                                    "type": "string",
                                    "enum": [
                                        "ASC",
                                        "DESC"
                                    ],
                                    "description": "Sort direction"
                                }
                            },
                            "required": [
                                "field",
                                "direction"
                            ]
                        }
                    },
                    "limit": {
                        "type": "object",
                        "description": "LIMIT clause",
                        "properties": {
                            "count": {
                                "type": "integer",
                                "minimum": 1,
                                "description": "Maximum number of rows to return"
                            },
                            "offset": {
                                "type": "integer",
                                "minimum": 0,
                                "description": "Number of rows to skip"
                            }
                        },
                        "required": [
                            "count"
                        ]
                    },
                    "window_functions": {
                        "type": "array",
                        "description": "Window functions for advanced analytics",
                        "items": {
                            "type": "object",
                            "properties": {
                                "function": {
                                    "type": "string",
                                    "enum": [
                                        "ROW_NUMBER",
                                        "RANK",
                                        "DENSE_RANK",
                                        "LAG",
                                        "LEAD"
                                    ],
                                    "description": "Window function type"
                                },
                                "partition_by": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "table": {
                                                "type": "string"
                                            },
                                            "column": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "table",
                                            "column"
                                        ]
                                    }
                                },
                                "order_by": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "field": {
                                                "type": "object",
                                                "properties": {
                                                    "table": {
                                                        "type": "string"
                                                    },
                                                    "column": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "table",
                                                    "column"
                                                ]
                                            },
                                            "direction": {
                                                "type": "string",
                                                "enum": [
                                                    "ASC",
                                                    "DESC"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "field",
                                            "direction"
                                        ]
                                    }
                                },
                                "alias": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "function",
                                "alias"
                            ]
                        }
                    }
                },
                "required": [
                    "query_type",
                    "select",
                    "from"
                ]
            }
        }
    ],
    "function_call": "auto",
    "temperature": 0.1,
    "max_tokens": 2000
}